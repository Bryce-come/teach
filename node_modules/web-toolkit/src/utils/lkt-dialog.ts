import Vue, { CreateElement } from 'vue';
import LktDialogConstructor from '../components/lkt-dialog.vue';
import { VNode, VNodeChildren } from 'vue';
import { Ref } from '@vue/composition-api';
import { ElForm } from 'element-ui/types/form';
import { ElFormItem } from 'element-ui/types/form-item';
import { ElTable } from 'element-ui/types/table';
import { ElTableColumn } from 'element-ui/types/table-column';
import { ElInputNumber } from 'element-ui/types/input-number';
import { ElDatePicker } from 'element-ui/types/date-picker';
import { ElSwitch } from 'element-ui/types/switch';
import { ElSelect } from 'element-ui/types/select';
import { ElRadio } from 'element-ui/types/radio';
import { ElButton } from 'element-ui/types/button';
import { ElOption } from 'element-ui/types/option';
import { EChartOption } from 'echarts';
import { ElTransfer } from 'element-ui/types/transfer';
type UnWrapper<O> = {
  [P in keyof O]: O[P] extends Ref<any> ? O[P]['value'] : O[P];
};
export interface VNodeDataMap {
  [index: string]: any;
  class?: string | string[] | Record<string, any>;
  style?: string | Partial<CSSStyleDeclaration>;
}
export interface LktDialogOptions<F, S> {
  renderContent?: (this: UnWrapper<S> & Vue & { form: F; close: (data?: F) => void }, h: <T extends keyof ElementTagMap>(tag: T, data?: Partial<ElementTagMap[T]> & VNodeDataMap, children?: VNodeChildren) => VNode, form: F) => VNode | void;
  render?: (h: CreateElement, form: F) => VNode | void;
  title?: string;
  setup?: () => S;
  beforeClose?: () => boolean;
  form?: F;
  validate?: boolean;
  width?: string;
  showActionButton?: boolean;
  actionButtonText?: string;
}
let uid = 0;
/**
 * 弹出一个窗口，内容为render函数的返回值；
 * 注意：renderContent为兼容选项，请勿使用；
 * @param opts 选项集
 */
export const LktDialog = <F, S>(opts: LktDialogOptions<F, S>) => new Promise<F>((resolve) => {
  const dialog = new LktDialogConstructor({
    propsData: {
      ...opts, submit: resolve,
    },
    data: {
      formModel: opts.form,
    },
  });
  const ctn = document.createElement('div');

  ctn.id = `lkt-dialog-${++uid}`;
  document.body.appendChild(ctn);
  dialog.$mount('#' + ctn.id);
});
type ElementTagMap = {
  [P in keyof HTMLElementTagNameMap]: any;
} & {
  'el-form': ElForm & { [key: string]: any };
  'el-form-item': ElFormItem & { [key: string]: any };
  'el-table': ElTable & { [key: string]: any };
  'el-table-column': ElTableColumn & { [key: string]: any };
  'el-input': ElInputFix & { [key: string]: any };
  'el-input-number': ElInputNumber & { [key: string]: any };
  'el-date-picker': ElDatePicker & { [key: string]: any };
  'el-switch': ElSwitch & { [key: string]: any };
  'el-select': ElSelect & { [key: string]: any };
  'el-radio': ElRadio & { [key: string]: any };
  'el-checkbox': { [key: string]: any };
  'el-button': ElButton & { [key: string]: any };
  'el-option': ElOption & { [key: string]: any };
  'el-transfer': ElTransfer & { [key: string]: any };
  'v-chart': VChart & { [key: string]: any };
  'lkt-scrollbar': LktScrollbar & { [key: string]: any };
  'lkt-select': ElSelect & { [key: string]: any };
  'lkt-date-picker': LktDatePicker & { [key: string]: any };
  'data-tables': { [key: string]: any };
};
interface LktScrollbar {
  bgColor: string;
}
interface LktDatePicker {
  type: 'none' | 'daterange' | 'oee';
  value: Date;
}
interface VChart {
  autoresize: boolean;
  options: EChartOption;
}
interface ElInputFix {
  type: 'text' | 'textarea' | 'password';
  value: string;
  placeholder: string;
  clearable: boolean;
  maxlength: number;
  minlength: number;
  disabled: boolean;
  prefixIcon: string;
  suffixIcon: string;
  rows: number;
  readonly: boolean;
  showPassword: boolean;
  showWordLimit: boolean;
  onInput: (val: string) => any;
  onFocus: () => any;
  onBlur: () => any;
  onSelect: () => any;
}
